// Code generated by counterfeiter. DO NOT EDIT.
package dnsfakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/route53"
	"github.com/jghiloni/route53-ddns/dns"
)

type FakeRoute53Client struct {
	ChangeResourceRecordSetsStub        func(*route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error)
	changeResourceRecordSetsMutex       sync.RWMutex
	changeResourceRecordSetsArgsForCall []struct {
		arg1 *route53.ChangeResourceRecordSetsInput
	}
	changeResourceRecordSetsReturns struct {
		result1 *route53.ChangeResourceRecordSetsOutput
		result2 error
	}
	changeResourceRecordSetsReturnsOnCall map[int]struct {
		result1 *route53.ChangeResourceRecordSetsOutput
		result2 error
	}
	GetChangeStub        func(*route53.GetChangeInput) (*route53.GetChangeOutput, error)
	getChangeMutex       sync.RWMutex
	getChangeArgsForCall []struct {
		arg1 *route53.GetChangeInput
	}
	getChangeReturns struct {
		result1 *route53.GetChangeOutput
		result2 error
	}
	getChangeReturnsOnCall map[int]struct {
		result1 *route53.GetChangeOutput
		result2 error
	}
	GetHostedZoneStub        func(*route53.GetHostedZoneInput) (*route53.GetHostedZoneOutput, error)
	getHostedZoneMutex       sync.RWMutex
	getHostedZoneArgsForCall []struct {
		arg1 *route53.GetHostedZoneInput
	}
	getHostedZoneReturns struct {
		result1 *route53.GetHostedZoneOutput
		result2 error
	}
	getHostedZoneReturnsOnCall map[int]struct {
		result1 *route53.GetHostedZoneOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRoute53Client) ChangeResourceRecordSets(arg1 *route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error) {
	fake.changeResourceRecordSetsMutex.Lock()
	ret, specificReturn := fake.changeResourceRecordSetsReturnsOnCall[len(fake.changeResourceRecordSetsArgsForCall)]
	fake.changeResourceRecordSetsArgsForCall = append(fake.changeResourceRecordSetsArgsForCall, struct {
		arg1 *route53.ChangeResourceRecordSetsInput
	}{arg1})
	stub := fake.ChangeResourceRecordSetsStub
	fakeReturns := fake.changeResourceRecordSetsReturns
	fake.recordInvocation("ChangeResourceRecordSets", []interface{}{arg1})
	fake.changeResourceRecordSetsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRoute53Client) ChangeResourceRecordSetsCallCount() int {
	fake.changeResourceRecordSetsMutex.RLock()
	defer fake.changeResourceRecordSetsMutex.RUnlock()
	return len(fake.changeResourceRecordSetsArgsForCall)
}

func (fake *FakeRoute53Client) ChangeResourceRecordSetsCalls(stub func(*route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error)) {
	fake.changeResourceRecordSetsMutex.Lock()
	defer fake.changeResourceRecordSetsMutex.Unlock()
	fake.ChangeResourceRecordSetsStub = stub
}

func (fake *FakeRoute53Client) ChangeResourceRecordSetsArgsForCall(i int) *route53.ChangeResourceRecordSetsInput {
	fake.changeResourceRecordSetsMutex.RLock()
	defer fake.changeResourceRecordSetsMutex.RUnlock()
	argsForCall := fake.changeResourceRecordSetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRoute53Client) ChangeResourceRecordSetsReturns(result1 *route53.ChangeResourceRecordSetsOutput, result2 error) {
	fake.changeResourceRecordSetsMutex.Lock()
	defer fake.changeResourceRecordSetsMutex.Unlock()
	fake.ChangeResourceRecordSetsStub = nil
	fake.changeResourceRecordSetsReturns = struct {
		result1 *route53.ChangeResourceRecordSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRoute53Client) ChangeResourceRecordSetsReturnsOnCall(i int, result1 *route53.ChangeResourceRecordSetsOutput, result2 error) {
	fake.changeResourceRecordSetsMutex.Lock()
	defer fake.changeResourceRecordSetsMutex.Unlock()
	fake.ChangeResourceRecordSetsStub = nil
	if fake.changeResourceRecordSetsReturnsOnCall == nil {
		fake.changeResourceRecordSetsReturnsOnCall = make(map[int]struct {
			result1 *route53.ChangeResourceRecordSetsOutput
			result2 error
		})
	}
	fake.changeResourceRecordSetsReturnsOnCall[i] = struct {
		result1 *route53.ChangeResourceRecordSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRoute53Client) GetChange(arg1 *route53.GetChangeInput) (*route53.GetChangeOutput, error) {
	fake.getChangeMutex.Lock()
	ret, specificReturn := fake.getChangeReturnsOnCall[len(fake.getChangeArgsForCall)]
	fake.getChangeArgsForCall = append(fake.getChangeArgsForCall, struct {
		arg1 *route53.GetChangeInput
	}{arg1})
	stub := fake.GetChangeStub
	fakeReturns := fake.getChangeReturns
	fake.recordInvocation("GetChange", []interface{}{arg1})
	fake.getChangeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRoute53Client) GetChangeCallCount() int {
	fake.getChangeMutex.RLock()
	defer fake.getChangeMutex.RUnlock()
	return len(fake.getChangeArgsForCall)
}

func (fake *FakeRoute53Client) GetChangeCalls(stub func(*route53.GetChangeInput) (*route53.GetChangeOutput, error)) {
	fake.getChangeMutex.Lock()
	defer fake.getChangeMutex.Unlock()
	fake.GetChangeStub = stub
}

func (fake *FakeRoute53Client) GetChangeArgsForCall(i int) *route53.GetChangeInput {
	fake.getChangeMutex.RLock()
	defer fake.getChangeMutex.RUnlock()
	argsForCall := fake.getChangeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRoute53Client) GetChangeReturns(result1 *route53.GetChangeOutput, result2 error) {
	fake.getChangeMutex.Lock()
	defer fake.getChangeMutex.Unlock()
	fake.GetChangeStub = nil
	fake.getChangeReturns = struct {
		result1 *route53.GetChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRoute53Client) GetChangeReturnsOnCall(i int, result1 *route53.GetChangeOutput, result2 error) {
	fake.getChangeMutex.Lock()
	defer fake.getChangeMutex.Unlock()
	fake.GetChangeStub = nil
	if fake.getChangeReturnsOnCall == nil {
		fake.getChangeReturnsOnCall = make(map[int]struct {
			result1 *route53.GetChangeOutput
			result2 error
		})
	}
	fake.getChangeReturnsOnCall[i] = struct {
		result1 *route53.GetChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRoute53Client) GetHostedZone(arg1 *route53.GetHostedZoneInput) (*route53.GetHostedZoneOutput, error) {
	fake.getHostedZoneMutex.Lock()
	ret, specificReturn := fake.getHostedZoneReturnsOnCall[len(fake.getHostedZoneArgsForCall)]
	fake.getHostedZoneArgsForCall = append(fake.getHostedZoneArgsForCall, struct {
		arg1 *route53.GetHostedZoneInput
	}{arg1})
	stub := fake.GetHostedZoneStub
	fakeReturns := fake.getHostedZoneReturns
	fake.recordInvocation("GetHostedZone", []interface{}{arg1})
	fake.getHostedZoneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRoute53Client) GetHostedZoneCallCount() int {
	fake.getHostedZoneMutex.RLock()
	defer fake.getHostedZoneMutex.RUnlock()
	return len(fake.getHostedZoneArgsForCall)
}

func (fake *FakeRoute53Client) GetHostedZoneCalls(stub func(*route53.GetHostedZoneInput) (*route53.GetHostedZoneOutput, error)) {
	fake.getHostedZoneMutex.Lock()
	defer fake.getHostedZoneMutex.Unlock()
	fake.GetHostedZoneStub = stub
}

func (fake *FakeRoute53Client) GetHostedZoneArgsForCall(i int) *route53.GetHostedZoneInput {
	fake.getHostedZoneMutex.RLock()
	defer fake.getHostedZoneMutex.RUnlock()
	argsForCall := fake.getHostedZoneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRoute53Client) GetHostedZoneReturns(result1 *route53.GetHostedZoneOutput, result2 error) {
	fake.getHostedZoneMutex.Lock()
	defer fake.getHostedZoneMutex.Unlock()
	fake.GetHostedZoneStub = nil
	fake.getHostedZoneReturns = struct {
		result1 *route53.GetHostedZoneOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRoute53Client) GetHostedZoneReturnsOnCall(i int, result1 *route53.GetHostedZoneOutput, result2 error) {
	fake.getHostedZoneMutex.Lock()
	defer fake.getHostedZoneMutex.Unlock()
	fake.GetHostedZoneStub = nil
	if fake.getHostedZoneReturnsOnCall == nil {
		fake.getHostedZoneReturnsOnCall = make(map[int]struct {
			result1 *route53.GetHostedZoneOutput
			result2 error
		})
	}
	fake.getHostedZoneReturnsOnCall[i] = struct {
		result1 *route53.GetHostedZoneOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRoute53Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.changeResourceRecordSetsMutex.RLock()
	defer fake.changeResourceRecordSetsMutex.RUnlock()
	fake.getChangeMutex.RLock()
	defer fake.getChangeMutex.RUnlock()
	fake.getHostedZoneMutex.RLock()
	defer fake.getHostedZoneMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRoute53Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dns.Route53Client = new(FakeRoute53Client)
